package $model.packageName;


import static org.twdata.maven.mojoexecutor.MojoExecutor.*;

import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.BuildPluginManager;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.Component;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.apache.maven.project.MavenProject;


@Mojo(name = "${model.goal}", threadSafe = true, requiresDependencyResolution = ResolutionScope.TEST)
public class ${model.className}
    extends AbstractMojo
{

	@Parameter(defaultValue = "${project}", readonly = true)
	private MavenProject project;
	
	@Parameter(defaultValue = "${session}", readonly = true)
	private MavenSession session;
	
	@Component
	private BuildPluginManager pluginManager;
	

    public void execute()
        throws MojoExecutionException
    {
#foreach ( $plugin in $model.plugins )   
        getLog().info(" ");
        getLog().info("--  ${plugin.name}  ----------------------");
        getLog().info(" ");
        executeMojo(
                plugin(
                        groupId("${plugin.groupId}"),
                        artifactId("${plugin.artifactId}"),
                        version("${plugin.version}")
                ),
                goal("${plugin.goal}"),
                configuration(
#foreach( $parameter in $plugin.configuration )
#element($parameter, 5)#if( $foreach.hasNext ), 
#end
#end

                ),
                executionEnvironment(
                        project,
                        session,
                        pluginManager
                )
        );
        
#end
    }
    
    public void setProject(MavenProject project) {
        this.project = project;
    }
}

#macro ( indent $size ) 
#set($i = "    ")
#foreach( $foo in [1..$size] )$i#end
#end

#macro ( subElement $parameter ) 
#set( $indentSize = $indentSize + 1 )
#foreach( $subParameter in $parameter.children )
#element($subParameter, $indentSize)#if( $foreach.hasNext ),
#end
#end
#set( $indentSize = $indentSize - 1 ) 
#end


#macro ( attributes $attributes )
#set( $indentSize = $indentSize + 1 ) 
#indent($indentSize) attributes(
#foreach( $attribute in $attributes.keySet() )#indent($indentSize)        attribute("$attribute", "$attributes.get($attribute)")#if( $foreach.hasNext ),
#end
#end
)#end


#macro( element $parameter $indentSize )
#indent($indentSize)element(name ("$parameter.name"),
#if ( $parameter.hasAttributes() )
    #attributes($parameter.attributes)
#elseif ( $parameter.hasChildren() )
#subElement($parameter)
  #elseif ( $parameter.value )
       #indent($indentSize) "$parameter.value" #end
        
#indent($indentSize))#end
